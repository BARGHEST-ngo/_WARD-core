name: ci
on: [push, pull_request]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - run: pip install -e . pyinstaller
      - name: Smoke: version prints
        run: |
          python -m ward_core --version
          python main.py --version
      - name: Check PyInstaller version
        run: pyinstaller --version
      - name: Verify config file exists (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Checking if config file exists..."
          if (Test-Path "ward_core\config.yaml") {
            Write-Host "✓ ward_core\config.yaml exists"
            Get-Item "ward_core\config.yaml" | Format-List FullName, Length
          } else {
            Write-Host "✗ ward_core\config.yaml not found"
            Get-ChildItem ward_core\ | Format-Table Name
          }

      - name: Verify config file exists (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Checking if config file exists..."
          if [ -f "ward_core/config.yaml" ]; then
            echo "✓ ward_core/config.yaml exists"
            ls -la ward_core/config.yaml
          else
            echo "✗ ward_core/config.yaml not found"
            ls -la ward_core/
          fi



      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Building with PyInstaller using command line..."
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Config file exists: $(Test-Path 'ward_core\config.yaml')"
          $configPath = (Resolve-Path 'ward_core\config.yaml').Path
          Write-Host "Config file path: $configPath"

          # Try using relative path instead of absolute path
          $relativeConfigPath = "ward_core\config.yaml"
          $addDataArg = "$relativeConfigPath;."
          Write-Host "Add-data argument (relative): $addDataArg"
          Write-Host "Running: pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data `"$addDataArg`" main.py"

          # Run PyInstaller with verbose output
          pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data "$addDataArg" --log-level DEBUG main.py
          Write-Host "PyInstaller build completed"

      - name: Build with PyInstaller (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Building with PyInstaller using command line..."
          echo "Current directory: $(pwd)"
          echo "Config file exists: $(test -f ward_core/config.yaml && echo 'yes' || echo 'no')"

          # Try using relative path instead of absolute path
          relativeConfigPath="ward_core/config.yaml"
          addDataArg="$relativeConfigPath:."
          echo "Add-data argument (relative): $addDataArg"
          echo "Running: pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data \"$addDataArg\" main.py"

          # Run PyInstaller with verbose output
          pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data "$addDataArg" --log-level DEBUG main.py
          echo "PyInstaller build completed"

      - name: Debug - List build contents (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "=== BUILD DIRECTORY STRUCTURE ==="
          if (Test-Path "build") {
            Write-Host "Contents of build/dist/ward-core/:"
            if (Test-Path "build/dist/ward-core") {
              Get-ChildItem build/dist/ward-core | Format-Table Name, Length -AutoSize
            } else {
              Write-Host "build/dist/ward-core/ directory does not exist"
              Write-Host "Contents of build/dist/:"
              if (Test-Path "build/dist") {
                Get-ChildItem build/dist | Format-Table Name -AutoSize
              }
            }
          } else {
            Write-Host "build/ directory does not exist"
          }

          Write-Host "`n=== LOOKING FOR CONFIG FILES ==="
          if (Test-Path "build/dist/ward-core/config.yaml") {
            Write-Host "✓ Found config.yaml in expected location"
            Get-Item "build/dist/ward-core/config.yaml" | Format-List FullName, Length
          } else {
            Write-Host "✗ config.yaml not found in expected location"
            Write-Host "Searching for any .yaml files in build directory:"
            if (Test-Path "build") {
              $yamlFiles = Get-ChildItem -Recurse build -Filter "*.yaml" -ErrorAction SilentlyContinue
              $ymlFiles = Get-ChildItem -Recurse build -Filter "*.yml" -ErrorAction SilentlyContinue
              if ($yamlFiles) { $yamlFiles | Format-Table FullName -AutoSize }
              if ($ymlFiles) { $ymlFiles | Format-Table FullName -AutoSize }
              if (-not $yamlFiles -and -not $ymlFiles) { Write-Host "No .yaml or .yml files found" }
            }
          }

      - name: Debug - List build contents (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== BUILD DIRECTORY STRUCTURE ==="
          if [ -d "build" ]; then
            echo "Contents of build/:"
            find build -type f | head -20
            echo "..."
          else
            echo "build/ directory does not exist"
          fi

          echo ""
          echo "=== LOOKING FOR CONFIG FILES ==="
          if [ -f "build/dist/ward-core/config.yaml" ]; then
            echo "✓ Found config.yaml in expected location"
            ls -la build/dist/ward-core/config.yaml
          else
            echo "✗ config.yaml not found in expected location"
            echo "Searching for any .yaml files in build directory:"
            find build -name "*.yaml" -o -name "*.yml" 2>/dev/null || echo "No yaml files found"
          fi

      - name: Test PyInstaller build (Windows)
        if: runner.os == 'Windows'
        run: |
          if (!(Test-Path "build/dist/ward-core/config.yaml")) { Write-Error "config.yaml not found"; exit 1 }

      - name: Test PyInstaller build (Linux/macOS)
        if: runner.os != 'Windows'
        run: test -f build/dist/ward-core/config.yaml

      - name: Test PyInstaller executable (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build/dist/ward-core
          .\ward-core.exe --version

      - name: Test PyInstaller executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build/dist/ward-core
          ./ward-core --version