name: ci
on: [push, pull_request]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: pip install -e . pyinstaller
      - name: "Smoke: version prints"
        run: |
          python -m ward_core --version
          python main.py --version
      - name: Check PyInstaller version
        run: pyinstaller --version
      - name: Verify config file exists (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Checking if config file exists..."
          if (Test-Path "ward_core\config.yaml") {
            Write-Host "✓ ward_core\config.yaml exists"
            Get-Item "ward_core\config.yaml" | Format-List FullName, Length
          } else {
            Write-Host "✗ ward_core\config.yaml not found"
            Get-ChildItem ward_core\ | Format-Table Name
          }

      - name: Verify config file exists (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "Checking if config file exists..."
          if [ -f "ward_core/config.yaml" ]; then
            echo "✓ ward_core/config.yaml exists"
            ls -la ward_core/config.yaml
          else
            echo "✗ ward_core/config.yaml not found"
            ls -la ward_core/
          fi



      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "=== BUILDING WITH PYINSTALLER (Windows) ==="
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Config file exists: $(Test-Path 'ward_core\config.yaml')"

          # Windows uses semicolon separator
          $addDataArg = "ward_core\config.yaml;."
          Write-Host "Add-data argument: $addDataArg"
          Write-Host "Running: pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data `"$addDataArg`" main.py"

          pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data "$addDataArg" main.py

          if ($LASTEXITCODE -eq 0) {
            Write-Host "✓ PyInstaller completed successfully"
          } else {
            Write-Host "✗ PyInstaller failed with exit code: $LASTEXITCODE"
            exit 1
          }

      - name: Build with PyInstaller (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "=== BUILDING WITH PYINSTALLER (Linux/macOS) ==="
          echo "Operating System: $RUNNER_OS"
          echo "Current directory: $(pwd)"
          echo "Config file exists: $(test -f ward_core/config.yaml && echo 'yes' || echo 'no')"

          # Linux/macOS uses colon separator
          addDataArg="ward_core/config.yaml:."
          echo "Add-data argument: $addDataArg"
          echo "Running: pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data \"$addDataArg\" main.py"

          if pyinstaller --noconfirm --clean --name ward-core --distpath build/dist --workpath build/work --add-data "$addDataArg" main.py; then
            echo "✓ PyInstaller completed successfully"
          else
            echo "✗ PyInstaller failed with exit code: $?"
            exit 1
          fi

      - name: Post-build verification (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "=== POST-BUILD VERIFICATION (Windows) ==="

          # Check if build directory exists
          if (Test-Path "build/dist/ward-core") {
            Write-Host "✓ Build directory exists"
            Write-Host "`nBuild contents:"
            Get-ChildItem build/dist/ward-core | Format-Table Name, Length -AutoSize

            # Check for config file specifically
            if (Test-Path "build/dist/ward-core/config.yaml") {
              Write-Host "`n✓ config.yaml found in build!"
              $configFile = Get-Item "build/dist/ward-core/config.yaml"
              Write-Host "Config file size: $($configFile.Length) bytes"
              Write-Host "Config file path: $($configFile.FullName)"
            } else {
              Write-Host "`n✗ config.yaml NOT found in build"
              Write-Host "Searching for any YAML files..."
              $yamlFiles = Get-ChildItem -Recurse build/dist/ward-core -Filter "*.yaml" -ErrorAction SilentlyContinue
              $ymlFiles = Get-ChildItem -Recurse build/dist/ward-core -Filter "*.yml" -ErrorAction SilentlyContinue
              if ($yamlFiles -or $ymlFiles) {
                Write-Host "Found YAML files:"
                $yamlFiles | Format-Table FullName -AutoSize
                $ymlFiles | Format-Table FullName -AutoSize
              } else {
                Write-Host "No YAML files found in build directory"
              }
            }
          } else {
            Write-Host "✗ Build directory does not exist!"
            if (Test-Path "build/dist") {
              Write-Host "Contents of build/dist/:"
              Get-ChildItem build/dist | Format-Table Name -AutoSize
            } else {
              Write-Host "build/dist/ directory does not exist"
            }
          }

      - name: Post-build verification (Linux/macOS)
        if: always() && runner.os != 'Windows'
        run: |
          echo "=== POST-BUILD VERIFICATION (Linux/macOS) ==="
          echo "Operating System: $RUNNER_OS"

          # Check if build directory exists
          if [ -d "build/dist/ward-core" ]; then
            echo "✓ Build directory exists"
            echo ""
            echo "Build contents:"
            ls -la build/dist/ward-core/

            # Check for config file specifically
            if [ -f "build/dist/ward-core/config.yaml" ]; then
              echo ""
              echo "✓ config.yaml found in build!"
              ls -la build/dist/ward-core/config.yaml
              echo "Config file size: $(wc -c < build/dist/ward-core/config.yaml) bytes"
            else
              echo ""
              echo "✗ config.yaml NOT found in build"
              echo "Searching for any YAML files..."
              yamlFiles=$(find build/dist/ward-core -name "*.yaml" -o -name "*.yml" 2>/dev/null)
              if [ -n "$yamlFiles" ]; then
                echo "Found YAML files:"
                echo "$yamlFiles"
              else
                echo "No YAML files found in build directory"
              fi

              # Platform-specific debugging
              if [ "$RUNNER_OS" = "macOS" ]; then
                echo ""
                echo "=== macOS SPECIFIC DEBUGGING ==="
                echo "Checking for case sensitivity issues:"
                find build/dist/ward-core -iname "config.yaml" 2>/dev/null || echo "No config.yaml found (case insensitive)"
              fi
            fi
          else
            echo "✗ Build directory does not exist!"
            if [ -d "build/dist" ]; then
              echo "Contents of build/dist/:"
              ls -la build/dist/
            else
              echo "build/dist/ directory does not exist"
            fi
          fi

      - name: Test PyInstaller build (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "=== FINAL BUILD TEST (Windows) ==="
          # PyInstaller puts data files in _internal directory
          $configPath = "build/dist/ward-core/_internal/config.yaml"
          if (Test-Path $configPath) {
            Write-Host "✓ Config file found in _internal directory - test passed"
            Get-Item $configPath | Format-List FullName, Length
          } else {
            Write-Host "✗ Config file not found in _internal directory"
            Write-Host "Checking for config.yaml in root directory..."
            if (Test-Path "build/dist/ward-core/config.yaml") {
              Write-Host "Found in root directory (unexpected location)"
            } else {
              Write-Host "Not found in root directory either"
            }
            Write-Host "Build directory structure:"
            if (Test-Path "build/dist/ward-core") {
              Get-ChildItem -Recurse "build/dist/ward-core" | Where-Object Name -like "*.yaml" | Format-Table FullName -AutoSize
            }
            Write-Error "config.yaml not found in expected location"
            exit 1
          }

      - name: Test PyInstaller build (Linux/macOS)
        if: always() && runner.os != 'Windows'
        run: |
          echo "=== FINAL BUILD TEST (Linux/macOS) ==="
          echo "Operating System: $RUNNER_OS"

          # PyInstaller puts data files in _internal directory
          configPath="build/dist/ward-core/_internal/config.yaml"
          if [ -f "$configPath" ]; then
            echo "✓ Config file found in _internal directory - test passed"
            ls -la "$configPath"
          else
            echo "✗ Config file not found in _internal directory"
            echo "Checking for config.yaml in root directory..."
            if [ -f "build/dist/ward-core/config.yaml" ]; then
              echo "Found in root directory (unexpected location)"
              ls -la "build/dist/ward-core/config.yaml"
            else
              echo "Not found in root directory either"
            fi
            echo "Searching for any YAML files in build:"
            find build/dist/ward-core -name "*.yaml" -o -name "*.yml" 2>/dev/null || echo "No YAML files found"
            echo "Test failed - config.yaml not found in expected location"
            exit 1
          fi

      - name: Test PyInstaller executable (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build/dist/ward-core
          .\ward-core.exe --version

      - name: Test PyInstaller executable (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build/dist/ward-core
          ./ward-core --version